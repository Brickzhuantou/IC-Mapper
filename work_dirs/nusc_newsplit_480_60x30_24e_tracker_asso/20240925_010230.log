2024-09-25 01:02:30,467 - mmdet - INFO - Environment info:
------------------------------------------------------------
sys.platform: linux
Python: 3.8.18 (default, Sep 11 2023, 13:40:15) [GCC 11.2.0]
CUDA available: True
GPU 0,1: NVIDIA GeForce RTX 3090
CUDA_HOME: /usr/local/cuda
NVCC: Cuda compilation tools, release 11.8, V11.8.89
GCC: gcc (Ubuntu 9.4.0-1ubuntu1~18.04) 9.4.0
PyTorch: 1.9.0+cu111
PyTorch compiling details: PyTorch built with:
  - GCC 7.3
  - C++ Version: 201402
  - Intel(R) Math Kernel Library Version 2020.0.0 Product Build 20191122 for Intel(R) 64 architecture applications
  - Intel(R) MKL-DNN v2.1.2 (Git Hash 98be7e8afa711dc9b66c8ff3504129cb82013cdb)
  - OpenMP 201511 (a.k.a. OpenMP 4.5)
  - NNPACK is enabled
  - CPU capability usage: AVX2
  - CUDA Runtime 11.1
  - NVCC architecture flags: -gencode;arch=compute_37,code=sm_37;-gencode;arch=compute_50,code=sm_50;-gencode;arch=compute_60,code=sm_60;-gencode;arch=compute_70,code=sm_70;-gencode;arch=compute_75,code=sm_75;-gencode;arch=compute_80,code=sm_80;-gencode;arch=compute_86,code=sm_86
  - CuDNN 8.0.5
  - Magma 2.5.2
  - Build settings: BLAS_INFO=mkl, BUILD_TYPE=Release, CUDA_VERSION=11.1, CUDNN_VERSION=8.0.5, CXX_COMPILER=/opt/rh/devtoolset-7/root/usr/bin/c++, CXX_FLAGS= -Wno-deprecated -fvisibility-inlines-hidden -DUSE_PTHREADPOOL -fopenmp -DNDEBUG -DUSE_KINETO -DUSE_FBGEMM -DUSE_QNNPACK -DUSE_PYTORCH_QNNPACK -DUSE_XNNPACK -DSYMBOLICATE_MOBILE_DEBUG_HANDLE -O2 -fPIC -Wno-narrowing -Wall -Wextra -Werror=return-type -Wno-missing-field-initializers -Wno-type-limits -Wno-array-bounds -Wno-unknown-pragmas -Wno-sign-compare -Wno-unused-parameter -Wno-unused-variable -Wno-unused-function -Wno-unused-result -Wno-unused-local-typedefs -Wno-strict-overflow -Wno-strict-aliasing -Wno-error=deprecated-declarations -Wno-stringop-overflow -Wno-psabi -Wno-error=pedantic -Wno-error=redundant-decls -Wno-error=old-style-cast -fdiagnostics-color=always -faligned-new -Wno-unused-but-set-variable -Wno-maybe-uninitialized -fno-math-errno -fno-trapping-math -Werror=format -Wno-stringop-overflow, LAPACK_INFO=mkl, PERF_WITH_AVX=1, PERF_WITH_AVX2=1, PERF_WITH_AVX512=1, TORCH_VERSION=1.9.0, USE_CUDA=ON, USE_CUDNN=ON, USE_EXCEPTION_PTR=1, USE_GFLAGS=OFF, USE_GLOG=OFF, USE_MKL=ON, USE_MKLDNN=ON, USE_MPI=OFF, USE_NCCL=ON, USE_NNPACK=ON, USE_OPENMP=ON, 

TorchVision: 0.10.0+cu111
OpenCV: 4.9.0
MMCV: 1.6.0
MMCV Compiler: GCC 7.5
MMCV CUDA Compiler: 11.1
MMDetection: 2.28.2
MMSegmentation: 0.30.0
MMDetection3D: 1.0.0rc4+1ad097d
spconv2.0: False
------------------------------------------------------------

2024-09-25 01:02:30,907 - mmdet - INFO - Distributed training: True
2024-09-25 01:02:31,339 - mmdet - INFO - Config:
checkpoint_config = dict(interval=3480)
log_config = dict(
    interval=100,
    hooks=[dict(type='TextLoggerHook'),
           dict(type='TensorboardLoggerHook')])
dist_params = dict(backend='nccl')
log_level = 'INFO'
work_dir = './work_dirs/nusc_newsplit_480_60x30_24e_tracker_asso'
load_from = None
resume_from = None
workflow = [('train', 1)]
type = 'Mapper'
plugin = True
plugin_dir = 'StreamMap_plugin/'
img_norm_cfg = dict(
    mean=[103.53, 116.28, 123.675], std=[1.0, 1.0, 1.0], to_rgb=False)
img_h = 480
img_w = 800
img_size = (480, 800)
num_gpus = 8
batch_size = 4
num_iters_per_epoch = 870
num_epochs = 24
num_epochs_single_frame = 4
total_iters = 20880
num_queries = 100
cat2id = dict(ped_crossing=0, divider=1, boundary=2)
num_class = 3
roi_size = (60, 30)
bev_h = 50
bev_w = 100
pc_range = [-30.0, -15.0, -3, 30.0, 15.0, 5]
coords_dim = 2
sample_dist = -1
sample_num = -1
simplify = True
meta = dict(
    use_lidar=False,
    use_camera=True,
    use_radar=False,
    use_map=False,
    use_external=False,
    output_format='vector')
bev_embed_dims = 256
embed_dims = 512
num_feat_levels = 3
norm_cfg = dict(type='BN2d')
num_points = 20
permute = True
model = dict(
    type='StreamMapNet',
    roi_size=(60, 30),
    bev_h=50,
    bev_w=100,
    backbone_cfg=dict(
        type='BEVFormerBackbone',
        roi_size=(60, 30),
        bev_h=50,
        bev_w=100,
        use_grid_mask=True,
        img_backbone=dict(
            type='ResNet',
            with_cp=False,
            pretrained='open-mmlab://detectron2/resnet50_caffe',
            depth=50,
            num_stages=4,
            out_indices=(1, 2, 3),
            frozen_stages=-1,
            norm_cfg=dict(type='BN2d'),
            norm_eval=True,
            style='caffe',
            dcn=dict(type='DCNv2', deform_groups=1, fallback_on_stride=False),
            stage_with_dcn=(False, False, True, True)),
        img_neck=dict(
            type='FPN',
            in_channels=[512, 1024, 2048],
            out_channels=256,
            start_level=0,
            add_extra_convs=True,
            num_outs=3,
            norm_cfg=dict(type='BN2d'),
            relu_before_extra_convs=True),
        transformer=dict(
            type='PerceptionTransformer',
            embed_dims=256,
            encoder=dict(
                type='BEVFormerEncoder',
                num_layers=1,
                pc_range=[-30.0, -15.0, -3, 30.0, 15.0, 5],
                num_points_in_pillar=4,
                return_intermediate=False,
                transformerlayers=dict(
                    type='BEVFormerLayer',
                    attn_cfgs=[
                        dict(
                            type='TemporalSelfAttention',
                            embed_dims=256,
                            num_levels=1),
                        dict(
                            type='SpatialCrossAttention',
                            deformable_attention=dict(
                                type='MSDeformableAttention3D',
                                embed_dims=256,
                                num_points=8,
                                num_levels=3),
                            embed_dims=256)
                    ],
                    feedforward_channels=512,
                    ffn_dropout=0.1,
                    operation_order=('self_attn', 'norm', 'cross_attn', 'norm',
                                     'ffn', 'norm')))),
        positional_encoding=dict(
            type='LearnedPositionalEncoding',
            num_feats=128,
            row_num_embed=50,
            col_num_embed=100)),
    head_cfg=dict(
        type='MapTrackerAssoHead',
        asso_dist=None,
        num_queries=100,
        embed_dims=512,
        num_classes=3,
        in_channels=256,
        num_points=20,
        roi_size=(60, 30),
        coord_dim=2,
        different_heads=False,
        predict_refine=False,
        sync_cls_avg_factor=True,
        streaming_cfg=dict(
            streaming=True, batch_size=4, topk=33, trans_loss_weight=0.1),
        transformer=dict(
            type='MapTransformer',
            num_feature_levels=1,
            num_points=20,
            coord_dim=2,
            encoder=dict(type='PlaceHolderEncoder', embed_dims=512),
            decoder=dict(
                type='MapTransformerDecoder_new',
                num_layers=6,
                prop_add_stage=1,
                return_intermediate=True,
                transformerlayers=dict(
                    type='MapTransformerLayer',
                    attn_cfgs=[
                        dict(
                            type='MultiheadAttention',
                            embed_dims=512,
                            num_heads=8,
                            attn_drop=0.1,
                            proj_drop=0.1),
                        dict(
                            type='CustomMSDeformableAttention',
                            embed_dims=512,
                            num_heads=8,
                            num_levels=1,
                            num_points=20,
                            dropout=0.1)
                    ],
                    ffn_cfgs=dict(
                        type='FFN',
                        embed_dims=512,
                        feedforward_channels=1024,
                        num_fcs=2,
                        ffn_drop=0.1,
                        act_cfg=dict(type='ReLU', inplace=True)),
                    feedforward_channels=1024,
                    ffn_dropout=0.1,
                    operation_order=('self_attn', 'norm', 'cross_attn', 'norm',
                                     'ffn', 'norm')))),
        loss_cls=dict(
            type='FocalLoss',
            use_sigmoid=True,
            gamma=2.0,
            alpha=0.25,
            loss_weight=5.0),
        loss_reg=dict(type='LinesL1Loss', loss_weight=50.0, beta=0.01),
        assigner=dict(
            type='HungarianLinesAssigner',
            cost=dict(
                type='MapQueriesCost',
                cls_cost=dict(type='FocalLossCost', weight=5.0),
                reg_cost=dict(
                    type='LinesL1Cost', weight=50.0, beta=0.01,
                    permute=True)))),
    loss_asso=dict(
        type='CrossEntropyLoss', use_sigmoid=False, loss_weight=1.0),
    streaming_cfg=dict(
        streaming_bev=True,
        batch_size=4,
        fusion_cfg=dict(type='ConvGRU', out_channels=256)),
    model_name='SingleStage')
train_pipeline = [
    dict(
        type='VectorizeMap',
        coords_dim=2,
        roi_size=(60, 30),
        sample_num=20,
        normalize=True,
        permute=True),
    dict(type='LoadMultiViewImagesFromFiles', to_float32=True),
    dict(type='PhotoMetricDistortionMultiViewImage'),
    dict(
        type='ResizeMultiViewImages', size=(480, 800), change_intrinsics=True),
    dict(
        type='Normalize3D',
        mean=[103.53, 116.28, 123.675],
        std=[1.0, 1.0, 1.0],
        to_rgb=False),
    dict(type='PadMultiViewImages', size_divisor=32),
    dict(type='FormatBundleMap'),
    dict(
        type='Collect3D',
        keys=['img', 'vectors'],
        meta_keys=('token', 'ego2img', 'sample_idx', 'ego2global_translation',
                   'ego2global_rotation', 'img_shape', 'scene_name'))
]
test_pipeline = [
    dict(
        type='VectorizeMap',
        coords_dim=2,
        roi_size=(60, 30),
        sample_num=20,
        normalize=True,
        permute=True),
    dict(type='LoadMultiViewImagesFromFiles', to_float32=True),
    dict(
        type='ResizeMultiViewImages', size=(480, 800), change_intrinsics=True),
    dict(
        type='Normalize3D',
        mean=[103.53, 116.28, 123.675],
        std=[1.0, 1.0, 1.0],
        to_rgb=False),
    dict(type='PadMultiViewImages', size_divisor=32),
    dict(type='FormatBundleMap'),
    dict(
        type='Collect3D',
        keys=['img', 'vectors'],
        meta_keys=('token', 'ego2img', 'sample_idx', 'ego2global_translation',
                   'ego2global_rotation', 'img_shape', 'scene_name'))
]
eval_config = dict(
    type='NuscDataset',
    data_root='./datasets/nuScenes',
    ann_file='./datasets/nuScenes/nuscenes_map_infos_val_newsplit.pkl',
    meta=dict(
        use_lidar=False,
        use_camera=True,
        use_radar=False,
        use_map=False,
        use_external=False,
        output_format='vector'),
    roi_size=(60, 30),
    cat2id=dict(ped_crossing=0, divider=1, boundary=2),
    pipeline=[
        dict(
            type='VectorizeMap',
            coords_dim=2,
            simplify=True,
            normalize=False,
            roi_size=(60, 30)),
        dict(type='FormatBundleMap'),
        dict(type='Collect3D', keys=['vectors'], meta_keys=['token'])
    ],
    interval=1)
data = dict(
    samples_per_gpu=4,
    workers_per_gpu=4,
    train=dict(
        type='NuscDataset',
        data_root='./datasets/nuScenes',
        ann_file='./datasets/nuScenes/nuscenes_map_infos_train_newsplit.pkl',
        meta=dict(
            use_lidar=False,
            use_camera=True,
            use_radar=False,
            use_map=False,
            use_external=False,
            output_format='vector'),
        roi_size=(60, 30),
        cat2id=dict(ped_crossing=0, divider=1, boundary=2),
        pipeline=[
            dict(
                type='VectorizeMap',
                coords_dim=2,
                roi_size=(60, 30),
                sample_num=20,
                normalize=True,
                permute=True),
            dict(type='LoadMultiViewImagesFromFiles', to_float32=True),
            dict(type='PhotoMetricDistortionMultiViewImage'),
            dict(
                type='ResizeMultiViewImages',
                size=(480, 800),
                change_intrinsics=True),
            dict(
                type='Normalize3D',
                mean=[103.53, 116.28, 123.675],
                std=[1.0, 1.0, 1.0],
                to_rgb=False),
            dict(type='PadMultiViewImages', size_divisor=32),
            dict(type='FormatBundleMap'),
            dict(
                type='Collect3D',
                keys=['img', 'vectors'],
                meta_keys=('token', 'ego2img', 'sample_idx',
                           'ego2global_translation', 'ego2global_rotation',
                           'img_shape', 'scene_name'))
        ],
        seq_split_num=1),
    val=dict(
        type='NuscDataset',
        data_root='./datasets/nuScenes',
        ann_file='./datasets/nuScenes/nuscenes_map_infos_val_newsplit.pkl',
        meta=dict(
            use_lidar=False,
            use_camera=True,
            use_radar=False,
            use_map=False,
            use_external=False,
            output_format='vector'),
        roi_size=(60, 30),
        cat2id=dict(ped_crossing=0, divider=1, boundary=2),
        pipeline=[
            dict(
                type='VectorizeMap',
                coords_dim=2,
                roi_size=(60, 30),
                sample_num=20,
                normalize=True,
                permute=True),
            dict(type='LoadMultiViewImagesFromFiles', to_float32=True),
            dict(
                type='ResizeMultiViewImages',
                size=(480, 800),
                change_intrinsics=True),
            dict(
                type='Normalize3D',
                mean=[103.53, 116.28, 123.675],
                std=[1.0, 1.0, 1.0],
                to_rgb=False),
            dict(type='PadMultiViewImages', size_divisor=32),
            dict(type='FormatBundleMap'),
            dict(
                type='Collect3D',
                keys=['img', 'vectors'],
                meta_keys=('token', 'ego2img', 'sample_idx',
                           'ego2global_translation', 'ego2global_rotation',
                           'img_shape', 'scene_name'))
        ],
        eval_config=dict(
            type='NuscDataset',
            data_root='./datasets/nuScenes',
            ann_file='./datasets/nuScenes/nuscenes_map_infos_val_newsplit.pkl',
            meta=dict(
                use_lidar=False,
                use_camera=True,
                use_radar=False,
                use_map=False,
                use_external=False,
                output_format='vector'),
            roi_size=(60, 30),
            cat2id=dict(ped_crossing=0, divider=1, boundary=2),
            pipeline=[
                dict(
                    type='VectorizeMap',
                    coords_dim=2,
                    simplify=True,
                    normalize=False,
                    roi_size=(60, 30)),
                dict(type='FormatBundleMap'),
                dict(type='Collect3D', keys=['vectors'], meta_keys=['token'])
            ],
            interval=1),
        test_mode=True,
        seq_split_num=1),
    test=dict(
        type='NuscDataset',
        data_root='./datasets/nuScenes',
        ann_file='./datasets/nuScenes/nuscenes_map_infos_val_newsplit.pkl',
        meta=dict(
            use_lidar=False,
            use_camera=True,
            use_radar=False,
            use_map=False,
            use_external=False,
            output_format='vector'),
        roi_size=(60, 30),
        cat2id=dict(ped_crossing=0, divider=1, boundary=2),
        pipeline=[
            dict(
                type='VectorizeMap',
                coords_dim=2,
                roi_size=(60, 30),
                sample_num=20,
                normalize=True,
                permute=True),
            dict(type='LoadMultiViewImagesFromFiles', to_float32=True),
            dict(
                type='ResizeMultiViewImages',
                size=(480, 800),
                change_intrinsics=True),
            dict(
                type='Normalize3D',
                mean=[103.53, 116.28, 123.675],
                std=[1.0, 1.0, 1.0],
                to_rgb=False),
            dict(type='PadMultiViewImages', size_divisor=32),
            dict(type='FormatBundleMap'),
            dict(
                type='Collect3D',
                keys=['img', 'vectors'],
                meta_keys=('token', 'ego2img', 'sample_idx',
                           'ego2global_translation', 'ego2global_rotation',
                           'img_shape', 'scene_name'))
        ],
        eval_config=dict(
            type='NuscDataset',
            data_root='./datasets/nuScenes',
            ann_file='./datasets/nuScenes/nuscenes_map_infos_val_newsplit.pkl',
            meta=dict(
                use_lidar=False,
                use_camera=True,
                use_radar=False,
                use_map=False,
                use_external=False,
                output_format='vector'),
            roi_size=(60, 30),
            cat2id=dict(ped_crossing=0, divider=1, boundary=2),
            pipeline=[
                dict(
                    type='VectorizeMap',
                    coords_dim=2,
                    simplify=True,
                    normalize=False,
                    roi_size=(60, 30)),
                dict(type='FormatBundleMap'),
                dict(type='Collect3D', keys=['vectors'], meta_keys=['token'])
            ],
            interval=1),
        test_mode=True,
        seq_split_num=1),
    shuffler_sampler=dict(
        type='InfiniteGroupEachSampleInBatchSampler',
        seq_split_num=2,
        num_iters_to_seq=0,
        random_drop=0.0),
    nonshuffler_sampler=dict(type='DistributedSampler'))
optimizer = dict(
    type='AdamW',
    lr=0.0005,
    paramwise_cfg=dict(custom_keys=dict(img_backbone=dict(lr_mult=0.1))),
    weight_decay=0.01)
optimizer_config = dict(grad_clip=dict(max_norm=35, norm_type=2))
lr_config = dict(
    policy='CosineAnnealing',
    warmup='linear',
    warmup_iters=500,
    warmup_ratio=0.3333333333333333,
    min_lr_ratio=0.003)
evaluation = dict(interval=3480)
find_unused_parameters = True
runner = dict(type='IterBasedRunner', max_iters=20880)
SyncBN = True
gpu_ids = range(0, 2)

2024-09-25 01:02:31,339 - mmdet - INFO - Set random seed to 0, deterministic: False
2024-09-25 01:02:32,421 - mmdet - INFO - initialize ResNet with init_cfg {'type': 'Pretrained', 'checkpoint': 'open-mmlab://detectron2/resnet50_caffe'}
2024-09-25 01:02:59,945 - mmdet - INFO - initialize FPN with init_cfg {'type': 'Xavier', 'layer': 'Conv2d', 'distribution': 'uniform'}
Name of parameter - Initialization information

lateral_convs.0.conv.weight - torch.Size([256, 512, 1, 1]): 
XavierInit: gain=1, distribution=uniform, bias=0 

lateral_convs.0.bn.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FPN  

lateral_convs.0.bn.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FPN  

lateral_convs.1.conv.weight - torch.Size([256, 1024, 1, 1]): 
XavierInit: gain=1, distribution=uniform, bias=0 

lateral_convs.1.bn.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FPN  

lateral_convs.1.bn.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FPN  

lateral_convs.2.conv.weight - torch.Size([256, 2048, 1, 1]): 
XavierInit: gain=1, distribution=uniform, bias=0 

lateral_convs.2.bn.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FPN  

lateral_convs.2.bn.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FPN  

fpn_convs.0.conv.weight - torch.Size([256, 256, 3, 3]): 
XavierInit: gain=1, distribution=uniform, bias=0 

fpn_convs.0.bn.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FPN  

fpn_convs.0.bn.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FPN  

fpn_convs.1.conv.weight - torch.Size([256, 256, 3, 3]): 
XavierInit: gain=1, distribution=uniform, bias=0 

fpn_convs.1.bn.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FPN  

fpn_convs.1.bn.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FPN  

fpn_convs.2.conv.weight - torch.Size([256, 256, 3, 3]): 
XavierInit: gain=1, distribution=uniform, bias=0 

fpn_convs.2.bn.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FPN  

fpn_convs.2.bn.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FPN  
2024-09-25 01:03:00,311 - mmdet - INFO - Using SyncBN
2024-09-25 01:03:00,314 - mmdet - INFO - Model:
StreamMapNet(
  (backbone): BEVFormerBackbone(
    (grid_mask): GridMask()
    (img_backbone): ResNet(
      (conv1): Conv2d(3, 64, kernel_size=(7, 7), stride=(2, 2), padding=(3, 3), bias=False)
      (bn1): SyncBatchNorm(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu): ReLU(inplace=True)
      (maxpool): MaxPool2d(kernel_size=3, stride=2, padding=1, dilation=1, ceil_mode=False)
      (layer1): ResLayer(
        (0): Bottleneck(
          (conv1): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): SyncBatchNorm(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (bn2): SyncBatchNorm(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace=True)
          (downsample): Sequential(
            (0): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (1): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
        )
        (1): Bottleneck(
          (conv1): Conv2d(256, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): SyncBatchNorm(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (bn2): SyncBatchNorm(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace=True)
        )
        (2): Bottleneck(
          (conv1): Conv2d(256, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): SyncBatchNorm(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (bn2): SyncBatchNorm(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace=True)
        )
      )
      (layer2): ResLayer(
        (0): Bottleneck(
          (conv1): Conv2d(256, 128, kernel_size=(1, 1), stride=(2, 2), bias=False)
          (bn1): SyncBatchNorm(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (bn2): SyncBatchNorm(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): SyncBatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace=True)
          (downsample): Sequential(
            (0): Conv2d(256, 512, kernel_size=(1, 1), stride=(2, 2), bias=False)
            (1): SyncBatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
        )
        (1): Bottleneck(
          (conv1): Conv2d(512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): SyncBatchNorm(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (bn2): SyncBatchNorm(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): SyncBatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace=True)
        )
        (2): Bottleneck(
          (conv1): Conv2d(512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): SyncBatchNorm(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (bn2): SyncBatchNorm(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): SyncBatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace=True)
        )
        (3): Bottleneck(
          (conv1): Conv2d(512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): SyncBatchNorm(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (bn2): SyncBatchNorm(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): SyncBatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace=True)
        )
      )
      (layer3): ResLayer(
        (0): Bottleneck(
          (conv1): Conv2d(512, 256, kernel_size=(1, 1), stride=(2, 2), bias=False)
          (bn1): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): ModulatedDeformConv2dPack(
            (conv_offset): Conv2d(256, 27, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
          (bn2): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): SyncBatchNorm(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace=True)
          (downsample): Sequential(
            (0): Conv2d(512, 1024, kernel_size=(1, 1), stride=(2, 2), bias=False)
            (1): SyncBatchNorm(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
        )
        (1): Bottleneck(
          (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): ModulatedDeformConv2dPack(
            (conv_offset): Conv2d(256, 27, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
          (bn2): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): SyncBatchNorm(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace=True)
        )
        (2): Bottleneck(
          (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): ModulatedDeformConv2dPack(
            (conv_offset): Conv2d(256, 27, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
          (bn2): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): SyncBatchNorm(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace=True)
        )
        (3): Bottleneck(
          (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): ModulatedDeformConv2dPack(
            (conv_offset): Conv2d(256, 27, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
          (bn2): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): SyncBatchNorm(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace=True)
        )
        (4): Bottleneck(
          (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): ModulatedDeformConv2dPack(
            (conv_offset): Conv2d(256, 27, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
          (bn2): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): SyncBatchNorm(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace=True)
        )
        (5): Bottleneck(
          (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): ModulatedDeformConv2dPack(
            (conv_offset): Conv2d(256, 27, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
          (bn2): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): SyncBatchNorm(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace=True)
        )
      )
      (layer4): ResLayer(
        (0): Bottleneck(
          (conv1): Conv2d(1024, 512, kernel_size=(1, 1), stride=(2, 2), bias=False)
          (bn1): SyncBatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): ModulatedDeformConv2dPack(
            (conv_offset): Conv2d(512, 27, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
          (bn2): SyncBatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): SyncBatchNorm(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace=True)
          (downsample): Sequential(
            (0): Conv2d(1024, 2048, kernel_size=(1, 1), stride=(2, 2), bias=False)
            (1): SyncBatchNorm(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
        )
        (1): Bottleneck(
          (conv1): Conv2d(2048, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): SyncBatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): ModulatedDeformConv2dPack(
            (conv_offset): Conv2d(512, 27, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
          (bn2): SyncBatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): SyncBatchNorm(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace=True)
        )
        (2): Bottleneck(
          (conv1): Conv2d(2048, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): SyncBatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): ModulatedDeformConv2dPack(
            (conv_offset): Conv2d(512, 27, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
          (bn2): SyncBatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): SyncBatchNorm(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace=True)
        )
      )
    )
    init_cfg={'type': 'Pretrained', 'checkpoint': 'open-mmlab://detectron2/resnet50_caffe'}
    (img_neck): FPN(
      (lateral_convs): ModuleList(
        (0): ConvModule(
          (conv): Conv2d(512, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (1): ConvModule(
          (conv): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (2): ConvModule(
          (conv): Conv2d(2048, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (fpn_convs): ModuleList(
        (0): ConvModule(
          (conv): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (bn): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (1): ConvModule(
          (conv): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (bn): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (2): ConvModule(
          (conv): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (bn): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
    )
    init_cfg={'type': 'Xavier', 'layer': 'Conv2d', 'distribution': 'uniform'}
    (positional_encoding): LearnedPositionalEncoding(num_feats=128, row_num_embed=50, col_num_embed=100)
    (transformer): PerceptionTransformer(
      (encoder): BEVFormerEncoder(
        (layers): ModuleList(
          (0): BEVFormerLayer(
            (attentions): ModuleList(
              (0): TemporalSelfAttention(
                (dropout): Dropout(p=0.1, inplace=False)
                (sampling_offsets): Linear(in_features=512, out_features=128, bias=True)
                (attention_weights): Linear(in_features=512, out_features=64, bias=True)
                (value_proj): Linear(in_features=256, out_features=256, bias=True)
                (output_proj): Linear(in_features=256, out_features=256, bias=True)
              )
              (1): SpatialCrossAttention(
                (dropout): Dropout(p=0.1, inplace=False)
                (deformable_attention): MSDeformableAttention3D(
                  (sampling_offsets): Linear(in_features=256, out_features=384, bias=True)
                  (attention_weights): Linear(in_features=256, out_features=192, bias=True)
                  (value_proj): Linear(in_features=256, out_features=256, bias=True)
                )
                (output_proj): Linear(in_features=256, out_features=256, bias=True)
              )
            )
            (ffns): ModuleList(
              (0): FFN(
                (activate): ReLU(inplace=True)
                (layers): Sequential(
                  (0): Sequential(
                    (0): Linear(in_features=256, out_features=512, bias=True)
                    (1): ReLU(inplace=True)
                    (2): Dropout(p=0.1, inplace=False)
                  )
                  (1): Linear(in_features=512, out_features=256, bias=True)
                  (2): Dropout(p=0.1, inplace=False)
                )
                (dropout_layer): Identity()
              )
            )
            (norms): ModuleList(
              (0): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
              (1): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
              (2): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
            )
          )
        )
      )
    )
    (bev_embedding): Embedding(5000, 256)
  )
  (neck): Identity()
  (head): MapTrackerAssoHead(
    (query_update): MotionMLP(
      (fc): Sequential(
        (0): Linear(in_features=524, out_features=1024, bias=True)
        (1): LayerNorm((1024,), eps=1e-05, elementwise_affine=True)
        (2): ReLU()
        (3): Linear(in_features=1024, out_features=512, bias=True)
      )
    )
    (transformer): MapTransformer(
      (encoder): PlaceHolderEncoder()
      (decoder): MapTransformerDecoder_new(
        (layers): ModuleList(
          (0): MapTransformerLayer(
            (attentions): ModuleList(
              (0): MultiheadAttention(
                (attn): MultiheadAttention(
                  (out_proj): NonDynamicallyQuantizableLinear(in_features=512, out_features=512, bias=True)
                )
                (proj_drop): Dropout(p=0.1, inplace=False)
                (dropout_layer): Dropout(p=0.0, inplace=False)
              )
              (1): CustomMSDeformableAttention(
                (dropout): Dropout(p=0.1, inplace=False)
                (sampling_offsets): Linear(in_features=512, out_features=320, bias=True)
                (attention_weights): Linear(in_features=512, out_features=160, bias=True)
                (value_proj): Linear(in_features=512, out_features=512, bias=True)
                (output_proj): Linear(in_features=512, out_features=512, bias=True)
              )
            )
            (ffns): ModuleList(
              (0): FFN(
                (activate): ReLU(inplace=True)
                (layers): Sequential(
                  (0): Sequential(
                    (0): Linear(in_features=512, out_features=1024, bias=True)
                    (1): ReLU(inplace=True)
                    (2): Dropout(p=0.1, inplace=False)
                  )
                  (1): Linear(in_features=1024, out_features=512, bias=True)
                  (2): Dropout(p=0.1, inplace=False)
                )
                (dropout_layer): Identity()
              )
            )
            (norms): ModuleList(
              (0): LayerNorm((512,), eps=1e-05, elementwise_affine=True)
              (1): LayerNorm((512,), eps=1e-05, elementwise_affine=True)
              (2): LayerNorm((512,), eps=1e-05, elementwise_affine=True)
            )
          )
          (1): MapTransformerLayer(
            (attentions): ModuleList(
              (0): MultiheadAttention(
                (attn): MultiheadAttention(
                  (out_proj): NonDynamicallyQuantizableLinear(in_features=512, out_features=512, bias=True)
                )
                (proj_drop): Dropout(p=0.1, inplace=False)
                (dropout_layer): Dropout(p=0.0, inplace=False)
              )
              (1): CustomMSDeformableAttention(
                (dropout): Dropout(p=0.1, inplace=False)
                (sampling_offsets): Linear(in_features=512, out_features=320, bias=True)
                (attention_weights): Linear(in_features=512, out_features=160, bias=True)
                (value_proj): Linear(in_features=512, out_features=512, bias=True)
                (output_proj): Linear(in_features=512, out_features=512, bias=True)
              )
            )
            (ffns): ModuleList(
              (0): FFN(
                (activate): ReLU(inplace=True)
                (layers): Sequential(
                  (0): Sequential(
                    (0): Linear(in_features=512, out_features=1024, bias=True)
                    (1): ReLU(inplace=True)
                    (2): Dropout(p=0.1, inplace=False)
                  )
                  (1): Linear(in_features=1024, out_features=512, bias=True)
                  (2): Dropout(p=0.1, inplace=False)
                )
                (dropout_layer): Identity()
              )
            )
            (norms): ModuleList(
              (0): LayerNorm((512,), eps=1e-05, elementwise_affine=True)
              (1): LayerNorm((512,), eps=1e-05, elementwise_affine=True)
              (2): LayerNorm((512,), eps=1e-05, elementwise_affine=True)
            )
          )
          (2): MapTransformerLayer(
            (attentions): ModuleList(
              (0): MultiheadAttention(
                (attn): MultiheadAttention(
                  (out_proj): NonDynamicallyQuantizableLinear(in_features=512, out_features=512, bias=True)
                )
                (proj_drop): Dropout(p=0.1, inplace=False)
                (dropout_layer): Dropout(p=0.0, inplace=False)
              )
              (1): CustomMSDeformableAttention(
                (dropout): Dropout(p=0.1, inplace=False)
                (sampling_offsets): Linear(in_features=512, out_features=320, bias=True)
                (attention_weights): Linear(in_features=512, out_features=160, bias=True)
                (value_proj): Linear(in_features=512, out_features=512, bias=True)
                (output_proj): Linear(in_features=512, out_features=512, bias=True)
              )
            )
            (ffns): ModuleList(
              (0): FFN(
                (activate): ReLU(inplace=True)
                (layers): Sequential(
                  (0): Sequential(
                    (0): Linear(in_features=512, out_features=1024, bias=True)
                    (1): ReLU(inplace=True)
                    (2): Dropout(p=0.1, inplace=False)
                  )
                  (1): Linear(in_features=1024, out_features=512, bias=True)
                  (2): Dropout(p=0.1, inplace=False)
                )
                (dropout_layer): Identity()
              )
            )
            (norms): ModuleList(
              (0): LayerNorm((512,), eps=1e-05, elementwise_affine=True)
              (1): LayerNorm((512,), eps=1e-05, elementwise_affine=True)
              (2): LayerNorm((512,), eps=1e-05, elementwise_affine=True)
            )
          )
          (3): MapTransformerLayer(
            (attentions): ModuleList(
              (0): MultiheadAttention(
                (attn): MultiheadAttention(
                  (out_proj): NonDynamicallyQuantizableLinear(in_features=512, out_features=512, bias=True)
                )
                (proj_drop): Dropout(p=0.1, inplace=False)
                (dropout_layer): Dropout(p=0.0, inplace=False)
              )
              (1): CustomMSDeformableAttention(
                (dropout): Dropout(p=0.1, inplace=False)
                (sampling_offsets): Linear(in_features=512, out_features=320, bias=True)
                (attention_weights): Linear(in_features=512, out_features=160, bias=True)
                (value_proj): Linear(in_features=512, out_features=512, bias=True)
                (output_proj): Linear(in_features=512, out_features=512, bias=True)
              )
            )
            (ffns): ModuleList(
              (0): FFN(
                (activate): ReLU(inplace=True)
                (layers): Sequential(
                  (0): Sequential(
                    (0): Linear(in_features=512, out_features=1024, bias=True)
                    (1): ReLU(inplace=True)
                    (2): Dropout(p=0.1, inplace=False)
                  )
                  (1): Linear(in_features=1024, out_features=512, bias=True)
                  (2): Dropout(p=0.1, inplace=False)
                )
                (dropout_layer): Identity()
              )
            )
            (norms): ModuleList(
              (0): LayerNorm((512,), eps=1e-05, elementwise_affine=True)
              (1): LayerNorm((512,), eps=1e-05, elementwise_affine=True)
              (2): LayerNorm((512,), eps=1e-05, elementwise_affine=True)
            )
          )
          (4): MapTransformerLayer(
            (attentions): ModuleList(
              (0): MultiheadAttention(
                (attn): MultiheadAttention(
                  (out_proj): NonDynamicallyQuantizableLinear(in_features=512, out_features=512, bias=True)
                )
                (proj_drop): Dropout(p=0.1, inplace=False)
                (dropout_layer): Dropout(p=0.0, inplace=False)
              )
              (1): CustomMSDeformableAttention(
                (dropout): Dropout(p=0.1, inplace=False)
                (sampling_offsets): Linear(in_features=512, out_features=320, bias=True)
                (attention_weights): Linear(in_features=512, out_features=160, bias=True)
                (value_proj): Linear(in_features=512, out_features=512, bias=True)
                (output_proj): Linear(in_features=512, out_features=512, bias=True)
              )
            )
            (ffns): ModuleList(
              (0): FFN(
                (activate): ReLU(inplace=True)
                (layers): Sequential(
                  (0): Sequential(
                    (0): Linear(in_features=512, out_features=1024, bias=True)
                    (1): ReLU(inplace=True)
                    (2): Dropout(p=0.1, inplace=False)
                  )
                  (1): Linear(in_features=1024, out_features=512, bias=True)
                  (2): Dropout(p=0.1, inplace=False)
                )
                (dropout_layer): Identity()
              )
            )
            (norms): ModuleList(
              (0): LayerNorm((512,), eps=1e-05, elementwise_affine=True)
              (1): LayerNorm((512,), eps=1e-05, elementwise_affine=True)
              (2): LayerNorm((512,), eps=1e-05, elementwise_affine=True)
            )
          )
          (5): MapTransformerLayer(
            (attentions): ModuleList(
              (0): MultiheadAttention(
                (attn): MultiheadAttention(
                  (out_proj): NonDynamicallyQuantizableLinear(in_features=512, out_features=512, bias=True)
                )
                (proj_drop): Dropout(p=0.1, inplace=False)
                (dropout_layer): Dropout(p=0.0, inplace=False)
              )
              (1): CustomMSDeformableAttention(
                (dropout): Dropout(p=0.1, inplace=False)
                (sampling_offsets): Linear(in_features=512, out_features=320, bias=True)
                (attention_weights): Linear(in_features=512, out_features=160, bias=True)
                (value_proj): Linear(in_features=512, out_features=512, bias=True)
                (output_proj): Linear(in_features=512, out_features=512, bias=True)
              )
            )
            (ffns): ModuleList(
              (0): FFN(
                (activate): ReLU(inplace=True)
                (layers): Sequential(
                  (0): Sequential(
                    (0): Linear(in_features=512, out_features=1024, bias=True)
                    (1): ReLU(inplace=True)
                    (2): Dropout(p=0.1, inplace=False)
                  )
                  (1): Linear(in_features=1024, out_features=512, bias=True)
                  (2): Dropout(p=0.1, inplace=False)
                )
                (dropout_layer): Identity()
              )
            )
            (norms): ModuleList(
              (0): LayerNorm((512,), eps=1e-05, elementwise_affine=True)
              (1): LayerNorm((512,), eps=1e-05, elementwise_affine=True)
              (2): LayerNorm((512,), eps=1e-05, elementwise_affine=True)
            )
          )
        )
      )
    )
    (loss_cls): FocalLoss()
    (loss_reg): LinesL1Loss()
    (geo_dist_emb): Linear(in_features=1, out_features=512, bias=True)
    (fea_dist_emb): Linear(in_features=512, out_features=512, bias=True)
    (emb2mat): Linear(in_features=512, out_features=1, bias=True)
    (loss_asso): CrossEntropyLoss(avg_non_ignore=False)
    (bev_pos_embed): SinePositionalEncoding(num_feats=256, temperature=10000, normalize=True, scale=6.283185307179586, eps=1e-06)
    (query_embedding): Embedding(100, 512)
    (reference_points_embed): Linear(in_features=512, out_features=40, bias=True)
    (input_proj): Conv2d(256, 512, kernel_size=(1, 1), stride=(1, 1))
    (reg_branches): ModuleList(
      (0): Sequential(
        (0): Linear(in_features=512, out_features=1024, bias=True)
        (1): LayerNorm((1024,), eps=1e-05, elementwise_affine=True)
        (2): ReLU()
        (3): Linear(in_features=1024, out_features=1024, bias=True)
        (4): LayerNorm((1024,), eps=1e-05, elementwise_affine=True)
        (5): ReLU()
        (6): Linear(in_features=1024, out_features=40, bias=True)
      )
      (1): Sequential(
        (0): Linear(in_features=512, out_features=1024, bias=True)
        (1): LayerNorm((1024,), eps=1e-05, elementwise_affine=True)
        (2): ReLU()
        (3): Linear(in_features=1024, out_features=1024, bias=True)
        (4): LayerNorm((1024,), eps=1e-05, elementwise_affine=True)
        (5): ReLU()
        (6): Linear(in_features=1024, out_features=40, bias=True)
      )
      (2): Sequential(
        (0): Linear(in_features=512, out_features=1024, bias=True)
        (1): LayerNorm((1024,), eps=1e-05, elementwise_affine=True)
        (2): ReLU()
        (3): Linear(in_features=1024, out_features=1024, bias=True)
        (4): LayerNorm((1024,), eps=1e-05, elementwise_affine=True)
        (5): ReLU()
        (6): Linear(in_features=1024, out_features=40, bias=True)
      )
      (3): Sequential(
        (0): Linear(in_features=512, out_features=1024, bias=True)
        (1): LayerNorm((1024,), eps=1e-05, elementwise_affine=True)
        (2): ReLU()
        (3): Linear(in_features=1024, out_features=1024, bias=True)
        (4): LayerNorm((1024,), eps=1e-05, elementwise_affine=True)
        (5): ReLU()
        (6): Linear(in_features=1024, out_features=40, bias=True)
      )
      (4): Sequential(
        (0): Linear(in_features=512, out_features=1024, bias=True)
        (1): LayerNorm((1024,), eps=1e-05, elementwise_affine=True)
        (2): ReLU()
        (3): Linear(in_features=1024, out_features=1024, bias=True)
        (4): LayerNorm((1024,), eps=1e-05, elementwise_affine=True)
        (5): ReLU()
        (6): Linear(in_features=1024, out_features=40, bias=True)
      )
      (5): Sequential(
        (0): Linear(in_features=512, out_features=1024, bias=True)
        (1): LayerNorm((1024,), eps=1e-05, elementwise_affine=True)
        (2): ReLU()
        (3): Linear(in_features=1024, out_features=1024, bias=True)
        (4): LayerNorm((1024,), eps=1e-05, elementwise_affine=True)
        (5): ReLU()
        (6): Linear(in_features=1024, out_features=40, bias=True)
      )
    )
    (cls_branches): ModuleList(
      (0): Linear(in_features=512, out_features=3, bias=True)
      (1): Linear(in_features=512, out_features=3, bias=True)
      (2): Linear(in_features=512, out_features=3, bias=True)
      (3): Linear(in_features=512, out_features=3, bias=True)
      (4): Linear(in_features=512, out_features=3, bias=True)
      (5): Linear(in_features=512, out_features=3, bias=True)
    )
  )
  (stream_fusion_neck): ConvGRU(
    (convz): Conv2d(512, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
    (convr): Conv2d(512, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
    (convq): Conv2d(512, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
    (ln): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
  )
)
